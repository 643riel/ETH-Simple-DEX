{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "contracts/SimpleDEX.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.22;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\n/// @title Intercambio Descentralizado Simple (DEX)\r\n/// @notice Este contrato facilita los intercambios de tokens y la gestión de liquidez\r\n/// @dev Utiliza la fórmula de producto constante para los intercambios\r\n/// @author [Gabriel iakantas]\r\ncontract SimpleDEX is Ownable {\r\n    /// @notice Token A en el pool de liquidez\r\n    IERC20 public tokenA;\r\n\r\n    /// @notice Token B en el pool de liquidez\r\n    IERC20 public tokenB;\r\n\r\n    /// @notice Emitido cuando se agrega liquidez\r\n    /// @param amountA La cantidad de token A añadida\r\n    /// @param amountB La cantidad de token B añadida\r\n    event LiquidityAdded(uint256 amountA, uint256 amountB);\r\n\r\n    /// @notice Emitido cuando se retira liquidez\r\n    /// @param amountA La cantidad de token A retirada\r\n    /// @param amountB La cantidad de token B retirada\r\n    event LiquidityRemoved(uint256 amountA, uint256 amountB);\r\n\r\n    /// @notice Emitido cuando ocurre un intercambio de tokens\r\n    /// @param user La dirección del usuario que realiza el intercambio\r\n    /// @param amountIn La cantidad de tokens de entrada\r\n    /// @param amountOut La cantidad de tokens de salida\r\n    event TokenSwapped(address indexed user, uint256 amountIn, uint256 amountOut);\r\n\r\n    /// @notice Inicializa el DEX con dos tokens\r\n    /// @param _tokenA Dirección del token A\r\n    /// @param _tokenB Dirección del token B\r\n    constructor(address _tokenA, address _tokenB) Ownable(msg.sender) {\r\n        tokenA = IERC20(_tokenA);\r\n        tokenB = IERC20(_tokenB);\r\n    }\r\n\r\n    /// @notice Agrega liquidez al pool\r\n    /// @dev Solo puede ser llamado por el propietario\r\n    /// @param amountA La cantidad de token A para agregar\r\n    /// @param amountB La cantidad de token B para agregar\r\n    function addLiquidity(uint256 amountA, uint256 amountB) external onlyOwner {\r\n        require(amountA > 0 && amountB > 0, \"Amounts must be > 0\");\r\n        tokenA.transferFrom(msg.sender, address(this), amountA);\r\n        tokenB.transferFrom(msg.sender, address(this), amountB);\r\n\r\n        emit LiquidityAdded(amountA, amountB);\r\n    }\r\n\r\n    /// @notice Retira liquidez del pool\r\n    /// @dev Solo puede ser llamado por el propietario\r\n    /// @param amountA La cantidad de token A para retirar\r\n    /// @param amountB La cantidad de token B para retirar\r\n    function removeLiquidity(uint256 amountA, uint256 amountB) external onlyOwner {\r\n        uint256 balanceA = tokenA.balanceOf(address(this));\r\n        uint256 balanceB = tokenB.balanceOf(address(this));\r\n        \r\n        require(amountA <= balanceA && amountB <= balanceB, \"Low liquidity\");\r\n\r\n        tokenA.transfer(msg.sender, amountA);\r\n        tokenB.transfer(msg.sender, amountB);\r\n\r\n        emit LiquidityRemoved(amountA, amountB);\r\n    }\r\n\r\n    /// @notice Intercambia token A por token B\r\n    /// @param amountAIn La cantidad de token A para intercambiar\r\n    function swapAforB(uint256 amountAIn) external {\r\n        require(amountAIn > 0, \"Amount must be > 0\");\r\n\r\n        uint256 balanceA = tokenA.balanceOf(address(this));\r\n        uint256 balanceB = tokenB.balanceOf(address(this));\r\n        uint256 amountBOut = getAmountOut(amountAIn, balanceA, balanceB);\r\n\r\n        tokenA.transferFrom(msg.sender, address(this), amountAIn);\r\n        tokenB.transfer(msg.sender, amountBOut);\r\n\r\n        emit TokenSwapped(msg.sender, amountAIn, amountBOut);\r\n    }\r\n\r\n    /// @notice Intercambia token B por token A\r\n    /// @param amountBIn La cantidad de token B para intercambiar\r\n    function swapBforA(uint256 amountBIn) external {\r\n        require(amountBIn > 0, \"Amount must be > 0\");\r\n\r\n        uint256 balanceA = tokenA.balanceOf(address(this));\r\n        uint256 balanceB = tokenB.balanceOf(address(this));\r\n        uint256 amountAOut = getAmountOut(amountBIn, balanceB, balanceA);\r\n\r\n        tokenB.transferFrom(msg.sender, address(this), amountBIn);\r\n        tokenA.transfer(msg.sender, amountAOut);\r\n\r\n        emit TokenSwapped(msg.sender, amountBIn, amountAOut);\r\n    }\r\n\r\n    /// @notice Obtiene el precio de un token en relación con el otro\r\n    /// @param _token Dirección del token para obtener su precio\r\n    /// @return El precio en términos del otro token\r\n    function getPrice(address _token) external view returns (uint256) {\r\n        require(_token == address(tokenA) || _token == address(tokenB), \"Invalid token\");\r\n\r\n        uint256 balanceA = tokenA.balanceOf(address(this));\r\n        uint256 balanceB = tokenB.balanceOf(address(this));\r\n\r\n        return (_token == address(tokenA))\r\n            ? (balanceB * 1e18) / balanceA\r\n            : (balanceA * 1e18) / balanceB;\r\n    }\r\n\r\n    /// @notice Calcula la cantidad de tokens que se obtendrán en un intercambio\r\n    /// @dev Implementa la fórmula de producto constante\r\n    /// @param amountIn La cantidad de tokens de entrada\r\n    /// @param reserveIn La reserva del token de entrada\r\n    /// @param reserveOut La reserva del token de salida\r\n    /// @return La cantidad de tokens de salida\r\n    function getAmountOut(uint256 amountIn, uint256 reserveIn, uint256 reserveOut) private pure returns (uint256) {\r\n        return (amountIn * reserveOut) / (reserveIn + amountIn);\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "evmVersion": "paris",
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}