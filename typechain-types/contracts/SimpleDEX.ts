/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface SimpleDEXInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addLiquidity"
      | "getPrice"
      | "owner"
      | "removeLiquidity"
      | "renounceOwnership"
      | "swapAforB"
      | "swapBforA"
      | "tokenA"
      | "tokenB"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "LiquidityAdded"
      | "LiquidityRemoved"
      | "OwnershipTransferred"
      | "TokenSwapped"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPrice",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeLiquidity",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swapAforB",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapBforA",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "tokenA", values?: undefined): string;
  encodeFunctionData(functionFragment: "tokenB", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swapAforB", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swapBforA", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenA", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenB", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace LiquidityAddedEvent {
  export type InputTuple = [amountA: BigNumberish, amountB: BigNumberish];
  export type OutputTuple = [amountA: bigint, amountB: bigint];
  export interface OutputObject {
    amountA: bigint;
    amountB: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LiquidityRemovedEvent {
  export type InputTuple = [amountA: BigNumberish, amountB: BigNumberish];
  export type OutputTuple = [amountA: bigint, amountB: bigint];
  export interface OutputObject {
    amountA: bigint;
    amountB: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenSwappedEvent {
  export type InputTuple = [
    user: AddressLike,
    amountIn: BigNumberish,
    amountOut: BigNumberish
  ];
  export type OutputTuple = [user: string, amountIn: bigint, amountOut: bigint];
  export interface OutputObject {
    user: string;
    amountIn: bigint;
    amountOut: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SimpleDEX extends BaseContract {
  connect(runner?: ContractRunner | null): SimpleDEX;
  waitForDeployment(): Promise<this>;

  interface: SimpleDEXInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addLiquidity: TypedContractMethod<
    [amountA: BigNumberish, amountB: BigNumberish],
    [void],
    "nonpayable"
  >;

  getPrice: TypedContractMethod<[_token: AddressLike], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  removeLiquidity: TypedContractMethod<
    [amountA: BigNumberish, amountB: BigNumberish],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  swapAforB: TypedContractMethod<
    [amountAIn: BigNumberish],
    [void],
    "nonpayable"
  >;

  swapBforA: TypedContractMethod<
    [amountBIn: BigNumberish],
    [void],
    "nonpayable"
  >;

  tokenA: TypedContractMethod<[], [string], "view">;

  tokenB: TypedContractMethod<[], [string], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addLiquidity"
  ): TypedContractMethod<
    [amountA: BigNumberish, amountB: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getPrice"
  ): TypedContractMethod<[_token: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "removeLiquidity"
  ): TypedContractMethod<
    [amountA: BigNumberish, amountB: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "swapAforB"
  ): TypedContractMethod<[amountAIn: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "swapBforA"
  ): TypedContractMethod<[amountBIn: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "tokenA"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tokenB"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "LiquidityAdded"
  ): TypedContractEvent<
    LiquidityAddedEvent.InputTuple,
    LiquidityAddedEvent.OutputTuple,
    LiquidityAddedEvent.OutputObject
  >;
  getEvent(
    key: "LiquidityRemoved"
  ): TypedContractEvent<
    LiquidityRemovedEvent.InputTuple,
    LiquidityRemovedEvent.OutputTuple,
    LiquidityRemovedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "TokenSwapped"
  ): TypedContractEvent<
    TokenSwappedEvent.InputTuple,
    TokenSwappedEvent.OutputTuple,
    TokenSwappedEvent.OutputObject
  >;

  filters: {
    "LiquidityAdded(uint256,uint256)": TypedContractEvent<
      LiquidityAddedEvent.InputTuple,
      LiquidityAddedEvent.OutputTuple,
      LiquidityAddedEvent.OutputObject
    >;
    LiquidityAdded: TypedContractEvent<
      LiquidityAddedEvent.InputTuple,
      LiquidityAddedEvent.OutputTuple,
      LiquidityAddedEvent.OutputObject
    >;

    "LiquidityRemoved(uint256,uint256)": TypedContractEvent<
      LiquidityRemovedEvent.InputTuple,
      LiquidityRemovedEvent.OutputTuple,
      LiquidityRemovedEvent.OutputObject
    >;
    LiquidityRemoved: TypedContractEvent<
      LiquidityRemovedEvent.InputTuple,
      LiquidityRemovedEvent.OutputTuple,
      LiquidityRemovedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "TokenSwapped(address,uint256,uint256)": TypedContractEvent<
      TokenSwappedEvent.InputTuple,
      TokenSwappedEvent.OutputTuple,
      TokenSwappedEvent.OutputObject
    >;
    TokenSwapped: TypedContractEvent<
      TokenSwappedEvent.InputTuple,
      TokenSwappedEvent.OutputTuple,
      TokenSwappedEvent.OutputObject
    >;
  };
}
